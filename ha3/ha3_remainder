const temp = [];
  let ans = 0;
  for(let i of papers) {
    let [x, y, width, height] = i;
    for(let j = y; j < y + height; j++) {
      for(let k = x; k < x + width; k++) {
        if(!([k, j] in temp)) {
          temp.push([k, j]);
          ans += 1;
        }
      }
    }
  }
  return ans;
  
  if (!req.body.username || !req.body.email || !req.body.password || !req.body.mobile) {

    return res.status(422).send("insufficient parameters supplied");
  }

  user.findOrCreate({
    where: {
      email: req.body.email
    },
    default: {
      email: req.body.email,
      password: req.body.password,
      username: req.body.username,
      mobile: req.body.mobile
    }
  })
  .then(([result, created]) => {
    if (!created) {

      res.status(409).send("email exists");
    }

    let data = {
      id: result.dataValues.id,
      email: result.dataValues.email,
      username: result.dataValues.username,
      mobile: result.dataValues.mobile,
      createdAt: result.dataValues.createdAt,
      updatedAt: result.dataValues.updatedAt
    }
    const accessToken = generateAccessToken(data);

    sendAccessToken(res, accessToken, 201);
    
  })
  .catch(error => {
    res.status(500).send();
  });
  
  if (!accessTokenData) {

    return res.json({ data: null, message: "not authorized" });
  }
  
  let userInfo = {
    id: accessTokenData.id,
    email: accessTokenData.email,
    password: accessTokenData.password,
    username: accessTokenData.username,
    mobile: accessTokenData.mobile,
    createdAt: accessTokenData.createdAt,
    updatedAt: accessTokenData.updatedAt
  }
  
  res.status(200).send({ data: { userInfo: userInfo } });
