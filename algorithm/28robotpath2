const direction = [[-1,0],[0,1],[1,0],[0,-1]];
  const R = room.length;
  const C = room[0].length;
  const isValid = (r,c) => (r >= 0 && r < R && c >= 0 && c < C); 
  const queue = [];
  const enQueue = (pos) => {
    queue.push(pos);
  };
  const deQueue = () => {
    const pos = queue.shift();
    return pos;
  };
  enQueue([ ...src, sDir-1 ]);
  let cnt = 0;
  while(queue.length > 0) {
    let [curr,curc,cdir] = deQueue();
    if(curr === dst[0] && curc === dst[1] && cdir === dDir-1) {
      return cnt;
    }
    let nr = curr+direction[cdir][0];
    let nc = curc+direction[cdir][1];
    while(!(isValid(nr,nc))) {
      nr -= direction[cdir][0];
      nc -= direction[cdir][1];
      cdir += 1;
      cnt += 1;
      if(cdir > 3) {
        cdir -= 4;
        cnt = 4 - cnt;
      }
      nr += direction[cdir][0];
      nc += direction[cdir][1];
    }
    cnt += 1;
    enQueue([nr,nc,cdir]);
    let temp = [nr-direction[cdir][0],nc-direction[cdir][1]];
    while(isValid(nr,nc)) {
      if(room[nr][nc] === 0) {
        room[nr][nc] = cnt;
        enQueue([nr,nc,cdir]);
        nr += direction[cdir][0];
        nc += direction[cdir][1];
      } else if(room[nr][nc] === 1) {
        while(nr !== temp[0] && nc !== temp[1]) {
          nr -= direction[cdir][0];
          nc -= direction[cdir][1];
        }
        cdir += 1;
        cnt += 1;
        if(cdir > 3) {
          cdir -= 4;
          cnt = 4 - cnt;
        }
        temp = [nr-direction[cdir][0],nc-direction[cdir][1]];
        nr += direction[cdir][0];
        nc += direction[cdir][1];
        cnt += 1;
      }
    }
  }
};
